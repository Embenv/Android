package embedded.tools.mrouter;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Message;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.ImageButton;
import android.widget.TextView;
import embedded.tools.mrouter.MyMenu.TimeThread;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
 
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;

public class Musicplay extends Activity {
	
	ImageButton imageButton1;
	ImageButton imageButton2;
	ImageButton imageButton3;
	ImageButton imageButton4;
	ImageButton imageButton5;
	ImageButton imageButton6;
	ImageButton imageButton7;

	String exec;
	int countTime;
	String pauseCommand;
	int volumeCountTime;
	int volume;
	int flag;
	boolean threadflag1;
	boolean threadflag2;
	boolean threadflag3;
	boolean threadflag4;
	int flag1=1;
	int flag2=1;
	int flag3=1;
	int flag4=1;
	int flag5=1;
	

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.musicplayview);
		
		countTime=0;
		volumeCountTime=0;
		volume=90;
		flag=2;
		TextView textView2 = (TextView)  findViewById(R.id.textView2);
		imageButton1 = (ImageButton) findViewById(R.id.imageButton1);
		imageButton1.setOnClickListener(new classVcutButtonOnClick());
		imageButton1.setOnTouchListener(new classVcutButtonOnCTouch());
		imageButton2 = (ImageButton) findViewById(R.id.imageButton2);
		imageButton2.setOnClickListener(new classVaddButtonOnClick());
		imageButton2.setOnTouchListener(new classVaddButtonOnCTouch());
		imageButton3 = (ImageButton) findViewById(R.id.imageButton3);
		imageButton3.setOnClickListener(new classStopButtonOnClick());
		imageButton3.setOnTouchListener(new classStopButtonOnCTouch());
		imageButton4 = (ImageButton) findViewById(R.id.imageButton4);
		imageButton4.setOnClickListener(new classPauseButtonOnClick());
		imageButton4.setOnTouchListener(new classPauseButtonOnCTouch());
		imageButton5 = (ImageButton) findViewById(R.id.imageButton5);
		imageButton5.setOnClickListener(new classPlayButtonOnClick());
		imageButton5.setOnTouchListener(new classPlayButtonOnCTouch());
		imageButton6 = (ImageButton) findViewById(R.id.imageButton6);
		imageButton6.setOnClickListener(new classBackButtonOnClick());
		imageButton6.setOnTouchListener(new classBackButtonOnCTouch());
		imageButton7 = (ImageButton) findViewById(R.id.imageButton7);
		imageButton7.setOnClickListener(new classExitButtonOnClick());
		imageButton7.setOnTouchListener(new classExitButtonOnCTouch());
		
		textView2.setText(exec);
	}
	
	
	class classVcutButtonOnClick implements OnClickListener {
		@Override
		public void onClick(View buttonView) {
			threadflag4=true;
			if(flag==1)
			{
				volumeCountTime++;
				flag=0;
			}
			volume=(volume--)-volumeCountTime;
			volumeCountTime++;
			if (flag5==1)
			{
				flag5--;
			new Vadd().start();
			}
			threadflag4=false;
		}
	}
	class classVaddButtonOnClick implements OnClickListener {
		@Override
		public void onClick(View buttonView) {
			threadflag4=true;
			if(flag==0)
			{
				volumeCountTime--;
				flag=1;
			}
			volume=(volume++)+volumeCountTime;
			volumeCountTime--;
			if (flag4==1)
			{
				flag4--;
			new Vadd().start();
			}
			threadflag4=false;
		}
	}
	class classStopButtonOnClick implements OnClickListener {
		@Override
		public void onClick(View buttonView) {
			threadflag3=true;
			if (flag3==1)
			{
				flag3--;
			new MStop().start();
			}
			threadflag3=false;
		}
	}
	class classPauseButtonOnClick implements OnClickListener {
		@Override
		public void onClick(View buttonView) {
			threadflag2=true;
			if (countTime==0)
			{
				pauseCommand="killall -STOP madplay";
				countTime++;
			}
			else
			{
				pauseCommand="killall -CONT madplay";
				countTime--;
			}
			if (flag2==1)
			{
				flag2--;
			new MPause().start();
			}
			threadflag2=false;
		}
	}
	class classPlayButtonOnClick implements OnClickListener {
		@Override
		public void onClick(View buttonView) {
			threadflag1=true;
			if (flag1==1)
			{
				flag1--;
				new Mplay().start();
			}
			threadflag1=false;
		}
	}
	class classExitButtonOnClick implements OnClickListener {
		@Override
		public void onClick(View buttonView) {
			System.exit(0);
		}
	}
	class classBackButtonOnClick implements OnClickListener {
		@Override
		public void onClick(View buttonView) {
			Intent menu_intent = new Intent();
			menu_intent.setClass(Musicplay.this, MyMenu.class);
			startActivity(menu_intent);
			System.exit(0);
		}
	}
	
	
	class classVcutButtonOnCTouch implements OnTouchListener {
		@Override
		public boolean onTouch(View buttonView, MotionEvent event) {
			if(event.getAction()==MotionEvent.ACTION_DOWN) 
            { 
				imageButton1.setImageResource(R.drawable.vcutcli);
            } 
            else if(event.getAction()==MotionEvent.ACTION_UP) 
            { 
            	imageButton1.setImageResource(R.drawable.vcutnor);
            } 
			return false;
		}
	}
	class classVaddButtonOnCTouch implements OnTouchListener {
		@Override
		public boolean onTouch(View buttonView, MotionEvent event) {
			if(event.getAction()==MotionEvent.ACTION_DOWN) 
            { 
				imageButton2.setImageResource(R.drawable.vaddcli);
            } 
            else if(event.getAction()==MotionEvent.ACTION_UP) 
            { 
            	imageButton2.setImageResource(R.drawable.vaddnor);
            } 
			return false;
		}
	}
	class classStopButtonOnCTouch implements OnTouchListener {
		@Override
		public boolean onTouch(View buttonView, MotionEvent event) {
			if(event.getAction()==MotionEvent.ACTION_DOWN) 
            { 
				imageButton3.setImageResource(R.drawable.mstopcli);
            } 
            else if(event.getAction()==MotionEvent.ACTION_UP) 
            { 
            	imageButton3.setImageResource(R.drawable.mstopnor);
            } 
			return false;
		}
	}
	class classPauseButtonOnCTouch implements OnTouchListener {
		@Override
		public boolean onTouch(View buttonView, MotionEvent event) {
			if(event.getAction()==MotionEvent.ACTION_DOWN) 
            { 
				imageButton4.setImageResource(R.drawable.mpausecli);
            } 
            else if(event.getAction()==MotionEvent.ACTION_UP) 
            { 
            	imageButton4.setImageResource(R.drawable.mpausenor);
            } 
			return false;
		}
	}
	class classPlayButtonOnCTouch implements OnTouchListener {
		@Override
		public boolean onTouch(View buttonView, MotionEvent event) {
			if(event.getAction()==MotionEvent.ACTION_DOWN) 
            { 
				imageButton5.setImageResource(R.drawable.mplaycli);
            } 
            else if(event.getAction()==MotionEvent.ACTION_UP) 
            { 
            	imageButton5.setImageResource(R.drawable.mplaynor);
            } 
			return false;
		}
	}
	
	class classBackButtonOnCTouch implements OnTouchListener {
		@Override
		public boolean onTouch(View buttonView, MotionEvent event) {
			if(event.getAction()==MotionEvent.ACTION_DOWN) 
            { 
				imageButton6.setBackgroundColor(Color.rgb(127,127,127));
            } 
            else if(event.getAction()==MotionEvent.ACTION_UP) 
            { 
            	imageButton6.setBackgroundColor(Color.rgb(33,33,33));
            } 
			return false;
		}
	}
	class classExitButtonOnCTouch implements OnTouchListener {
		@Override
		public boolean onTouch(View buttonView, MotionEvent event) {
			if(event.getAction()==MotionEvent.ACTION_DOWN) 
            { 
				imageButton7.setBackgroundColor(Color.rgb(127,127,127));
            } 
            else if(event.getAction()==MotionEvent.ACTION_UP) 
            { 
            	imageButton7.setBackgroundColor(Color.rgb(33,33,33));
            } 
			return false;
		}
	}
	
	
	 public class Mplay extends Thread {
	    	@Override
	    	public void run() {
	    		while (true)
	    		{
	    			if (threadflag1)
		    				exec = exec("10.15.33.47", "root", "0000", 22, "madplay /mnt/SD-P1/music/*.mp3 -z -r2 -a-10");
	    			
	    		}
	    	}
	    }
	 public class MPause extends Thread {
	    	@Override
	    	public void run() {
	    		while (true)
	    		{
	    			if (threadflag2)
		    				exec = exec("10.15.33.47", "root", "0000", 22, pauseCommand);
	    		}
	    	}
	    }
	 
	 public class MStop extends Thread {
	    	@Override
	    	public void run() {
	    		while (true)
	    		{
	    			if (threadflag3)
		    				exec = exec("10.15.33.47", "root", "0000", 22, "killall madplay");
	    		}
	    	}
	    }
	 
	 
	 public class Vadd extends Thread {
	    	@Override
	    	public void run() {
	    		while (true)
	    		{
	    			if (threadflag4)
		    				exec = exec("10.15.33.47", "root", "0000", 22, "amixer set Headphone "+volume+"%");
	    		}
	    	}
	    }
	 
	 
	
	
	public static String exec(String host,String user,String psw,int port,String command){
		String result="";
		Session session =null;
		ChannelExec openChannel =null;
		try {
			JSch jsch=new JSch();
			session = jsch.getSession(user, host, port);
			java.util.Properties config = new java.util.Properties();
			config.put("StrictHostKeyChecking", "no");
			session.setConfig(config);
			session.setPassword(psw);
			session.connect();
			openChannel = (ChannelExec) session.openChannel("exec");
			openChannel.setCommand(command);
			int exitStatus = openChannel.getExitStatus();
			System.out.println(exitStatus);
			openChannel.connect();  
            InputStream in = openChannel.getInputStream();  
            BufferedReader reader = new BufferedReader(new InputStreamReader(in));  
            String buf = null;
            while ((buf = reader.readLine()) != null) {
            	result+= new String(buf.getBytes("gbk"),"UTF-8")+"    <br />rn";  
            }  
		} catch (JSchException | IOException e) {
			result+=e.getMessage();
		}finally{
			if(openChannel!=null&&!openChannel.isClosed()){
				openChannel.disconnect();
			}
			if(session!=null&&session.isConnected()){
				session.disconnect();
			}
		}
		return result;
	}
	
	
	
	
	
}

